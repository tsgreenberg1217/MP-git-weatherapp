// Generated by Dagger (https://dagger.dev).
package com.example.headermodules.repositories;

import com.example.api.WeatherService;
import com.example.data_utility.mappers.DbMapper;
import com.example.data_utility.mappers.NetworkMapper;
import com.example.database.CityDao;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherRepository_Factory implements Factory<WeatherRepository> {
  private final Provider<WeatherService> serviceProvider;

  private final Provider<CityDao> cityDaoProvider;

  private final Provider<DbMapper> cacheMapperProvider;

  private final Provider<NetworkMapper> networkMapperProvider;

  public WeatherRepository_Factory(Provider<WeatherService> serviceProvider,
      Provider<CityDao> cityDaoProvider, Provider<DbMapper> cacheMapperProvider,
      Provider<NetworkMapper> networkMapperProvider) {
    this.serviceProvider = serviceProvider;
    this.cityDaoProvider = cityDaoProvider;
    this.cacheMapperProvider = cacheMapperProvider;
    this.networkMapperProvider = networkMapperProvider;
  }

  @Override
  public WeatherRepository get() {
    return newInstance(serviceProvider.get(), cityDaoProvider.get(), cacheMapperProvider.get(), networkMapperProvider.get());
  }

  public static WeatherRepository_Factory create(Provider<WeatherService> serviceProvider,
      Provider<CityDao> cityDaoProvider, Provider<DbMapper> cacheMapperProvider,
      Provider<NetworkMapper> networkMapperProvider) {
    return new WeatherRepository_Factory(serviceProvider, cityDaoProvider, cacheMapperProvider, networkMapperProvider);
  }

  public static WeatherRepository newInstance(WeatherService service, CityDao cityDao,
      DbMapper cacheMapper, NetworkMapper networkMapper) {
    return new WeatherRepository(service, cityDao, cacheMapper, networkMapper);
  }
}
